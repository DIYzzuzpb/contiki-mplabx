Version 3.2 HI-TECH Software Intermediate Code
"206 /opt/microchip/xc8/v1.12/include/stdio.h
[v _printf `(i ~T0 @X0 0 ev`*Cuc ]
[; ;stdio.h: 8: typedef int ptrdiff_t;
[; ;stdio.h: 9: typedef unsigned size_t;
[; ;stdio.h: 10: typedef unsigned short wchar_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 23: extern int errno;
[; ;stdio.h: 54: struct __prbuf
[; ;stdio.h: 55: {
[; ;stdio.h: 56: char * ptr;
[; ;stdio.h: 57: void (* func)(char);
[; ;stdio.h: 58: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 99: extern int cprintf(char *, ...);
[; ;stdio.h: 104: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 194: extern char * gets(char *);
[; ;stdio.h: 195: extern int puts(const char *);
[; ;stdio.h: 196: extern int scanf(const char *, ...);
[; ;stdio.h: 197: extern int sscanf(const char *, const char *, ...);
[; ;stdio.h: 198: extern int vprintf(const char *, va_list);
[; ;stdio.h: 199: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 200: extern int vscanf(const char *, va_list ap);
[; ;stdio.h: 201: extern int vsscanf(const char *, const char *, va_list);
[; ;stdio.h: 205: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 206: extern int printf(const char *, ...);
"35 /home/jarojuda/GitHub/contiki-mplabx/platform/pic18f97j60-family/../../../contiki/core/lib/assert.c
[v __xassert `(v ~T0 @X0 1 ef2`*Cuc`i ]
{
[; ;assert.c: 33: void
[; ;assert.c: 34: _xassert(const char *file, int lineno)
[; ;assert.c: 35: {
[e :U __xassert ]
[v _file `*Cuc ~T0 @X0 1 r1 ]
[v _lineno `i ~T0 @X0 1 r2 ]
[f ]
[; ;assert.c: 36: printf("Assertion failed: file %s, line %d.\n", file, lineno);
"36
[e ( _printf , , (. :s 1C _file _lineno ]
[; ;assert.c: 41: }
"41
[e :UE 2 ]
}
[p f _printf 8650880 ]
[a 1C 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 102 105 108 101 32 37 115 44 32 108 105 110 101 32 37 100 46 10 0 ]


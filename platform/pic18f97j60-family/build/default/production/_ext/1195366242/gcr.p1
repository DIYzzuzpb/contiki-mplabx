Version 3.2 HI-TECH Software Intermediate Code
"43 /home/jarojuda/GitHub/contiki-mplabx/platform/pic18f97j60-family/../../../contiki/core/lib/gcr.c
[v _GCR_encode `Cuc ~T0 @X0 -> 16 `i s ]
[i _GCR_encode
:U ..
"44
-> -> 10 `i `uc
-> -> 11 `i `uc
-> -> 18 `i `uc
-> -> 19 `i `uc
"45
-> -> 14 `i `uc
-> -> 15 `i `uc
-> -> 22 `i `uc
-> -> 23 `i `uc
"46
-> -> 9 `i `uc
-> -> 25 `i `uc
-> -> 26 `i `uc
-> -> 27 `i `uc
"47
-> -> 13 `i `uc
-> -> 29 `i `uc
-> -> 30 `i `uc
"48
-> -> 21 `i `uc
..
]
[; ;gcr.c: 43: static const unsigned char GCR_encode[16] = {
[; ;gcr.c: 44: 0x0a, 0x0b, 0x12, 0x13,
[; ;gcr.c: 45: 0x0e, 0x0f, 0x16, 0x17,
[; ;gcr.c: 46: 0x09, 0x19, 0x1a, 0x1b,
[; ;gcr.c: 47: 0x0d, 0x1d, 0x1e, 0x15
[; ;gcr.c: 48: };
"51
[v _GCR_decode `Cuc ~T0 @X0 -> 32 `i s ]
[i _GCR_decode
:U ..
"52
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
"53
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 255 `i `uc
"54
-> -> 255 `i `uc
-> -> 8 `i `uc
-> -> 0 `i `uc
-> -> 1 `i `uc
"55
-> -> 255 `i `uc
-> -> 12 `i `uc
-> -> 4 `i `uc
-> -> 5 `i `uc
"57
-> -> 255 `i `uc
-> -> 255 `i `uc
-> -> 2 `i `uc
-> -> 3 `i `uc
"58
-> -> 255 `i `uc
-> -> 15 `i `uc
-> -> 6 `i `uc
-> -> 7 `i `uc
"59
-> -> 255 `i `uc
-> -> 9 `i `uc
-> -> 10 `i `uc
-> -> 11 `i `uc
"60
-> -> 255 `i `uc
-> -> 13 `i `uc
-> -> 14 `i `uc
-> -> 255 `i `uc
..
]
[; ;gcr.c: 51: static const unsigned char GCR_decode[32] = {
[; ;gcr.c: 52: 0xff, 0xff, 0xff, 0xff,
[; ;gcr.c: 53: 0xff, 0xff, 0xff, 0xff,
[; ;gcr.c: 54: 0xff, 0x08, 0x00, 0x01,
[; ;gcr.c: 55: 0xff, 0x0c, 0x04, 0x05,
[; ;gcr.c: 57: 0xff, 0xff, 0x02, 0x03,
[; ;gcr.c: 58: 0xff, 0x0f, 0x06, 0x07,
[; ;gcr.c: 59: 0xff, 0x09, 0x0a, 0x0b,
[; ;gcr.c: 60: 0xff, 0x0d, 0x0e, 0xff,
[; ;gcr.c: 61: };
"63
[v _gcr_bits `uc ~T0 @X0 1 s ]
[i _gcr_bits
-> -> 0 `i `uc
]
[; ;gcr.c: 63: static unsigned char gcr_bits = 0;
"64
[v _gcr_val `us ~T0 @X0 1 s ]
[i _gcr_val
-> -> 0 `i `us
]
[; ;gcr.c: 64: static unsigned short gcr_val = 0;
"67
[v _gcr_init `(v ~T0 @X0 1 ef ]
{
[; ;gcr.c: 67: void gcr_init() {
[e :U _gcr_init ]
[f ]
[; ;gcr.c: 68: gcr_val = 0;
"68
[e = _gcr_val -> -> 0 `i `us ]
[; ;gcr.c: 69: gcr_bits = 0;
"69
[e = _gcr_bits -> -> 0 `i `uc ]
[; ;gcr.c: 70: }
"70
[e :UE 1 ]
}
"73
[v _gcr_finished `(uc ~T0 @X0 1 ef ]
{
[; ;gcr.c: 73: unsigned char gcr_finished() {
[e :U _gcr_finished ]
[f ]
[; ;gcr.c: 74: return gcr_bits == 0;
"74
[e ) -> -> == -> _gcr_bits `i -> 0 `i `i `uc ]
[e $UE 2  ]
[; ;gcr.c: 75: }
"75
[e :UE 2 ]
}
"78
[v _gcr_encode `(v ~T0 @X0 1 ef1`uc ]
{
[; ;gcr.c: 78: void gcr_encode(unsigned char raw_data) {
[e :U _gcr_encode ]
[v _raw_data `uc ~T0 @X0 1 r1 ]
[f ]
[; ;gcr.c: 79: gcr_val |=
[; ;gcr.c: 80: ((GCR_encode[raw_data >> 4u] << 5u ) |
[; ;gcr.c: 81: GCR_encode[raw_data & 0xf]) << gcr_bits;
"81
[e =| _gcr_val -> << | << -> *U + &U _GCR_encode * -> -> >> -> _raw_data `i -> 4 `ui `ui `ux -> -> # *U &U _GCR_encode `ui `ux `i -> 5 `ui -> *U + &U _GCR_encode * -> -> & -> _raw_data `i -> 15 `i `ui `ux -> -> # *U &U _GCR_encode `ui `ux `i _gcr_bits `us ]
[; ;gcr.c: 82: gcr_bits += 10;
"82
[e =+ _gcr_bits -> -> 10 `i `uc ]
[; ;gcr.c: 83: }
"83
[e :UE 3 ]
}
"86
[v _gcr_get_encoded `(uc ~T0 @X0 1 ef1`*uc ]
{
[; ;gcr.c: 86: unsigned char gcr_get_encoded(unsigned char *raw_data) {
[e :U _gcr_get_encoded ]
[v _raw_data `*uc ~T0 @X0 1 r1 ]
[f ]
[; ;gcr.c: 87: if (gcr_bits >= 8) {
"87
[e $ ! >= -> _gcr_bits `i -> 8 `i 5  ]
{
[; ;gcr.c: 88: *raw_data = (unsigned char) (gcr_val & 0xff);
"88
[e = *U _raw_data -> & -> _gcr_val `ui -> -> 255 `i `ui `uc ]
[; ;gcr.c: 89: gcr_val = gcr_val >> 8u;
"89
[e = _gcr_val -> >> -> _gcr_val `ui -> 8 `ui `us ]
[; ;gcr.c: 90: gcr_bits = gcr_bits - 8;
"90
[e = _gcr_bits -> - -> _gcr_bits `i -> 8 `i `uc ]
[; ;gcr.c: 91: return 1;
"91
[e ) -> -> 1 `i `uc ]
[e $UE 4  ]
"92
}
[e :U 5 ]
[; ;gcr.c: 92: }
[; ;gcr.c: 93: return 0;
"93
[e ) -> -> 0 `i `uc ]
[e $UE 4  ]
[; ;gcr.c: 94: }
"94
[e :UE 4 ]
}
"97
[v _gcr_decode `(v ~T0 @X0 1 ef1`uc ]
{
[; ;gcr.c: 97: void gcr_decode(unsigned char gcr_data) {
[e :U _gcr_decode ]
[v _gcr_data `uc ~T0 @X0 1 r1 ]
[f ]
[; ;gcr.c: 98: gcr_val |= gcr_data << gcr_bits;
"98
[e =| _gcr_val -> << -> _gcr_data `i _gcr_bits `us ]
[; ;gcr.c: 99: gcr_bits += 8;
"99
[e =+ _gcr_bits -> -> 8 `i `uc ]
[; ;gcr.c: 100: }
"100
[e :UE 6 ]
}
"103
[v _gcr_valid `(uc ~T0 @X0 1 ef ]
{
[; ;gcr.c: 103: unsigned char gcr_valid() {
[e :U _gcr_valid ]
[f ]
[; ;gcr.c: 104: if (gcr_bits >= 10) {
"104
[e $ ! >= -> _gcr_bits `i -> 10 `i 8  ]
{
"105
[v _val `us ~T0 @X0 1 a ]
[; ;gcr.c: 105: unsigned short val = gcr_val & 0x3ff;
[e = _val -> & -> _gcr_val `ui -> -> 1023 `i `ui `us ]
[; ;gcr.c: 106: if ((GCR_decode[val >> 5u] << 4u) == 0xff ||
[; ;gcr.c: 107: (GCR_decode[val & 0x1f]) == 0xff) {
"107
[e $ ! || == << -> *U + &U _GCR_decode * -> >> -> _val `ui -> 5 `ui `ux -> -> # *U &U _GCR_decode `ui `ux `i -> 4 `ui -> 255 `i == -> *U + &U _GCR_decode * -> & -> _val `ui -> -> 31 `i `ui `ux -> -> # *U &U _GCR_decode `ui `ux `i -> 255 `i 9  ]
{
[; ;gcr.c: 108: return 0;
"108
[e ) -> -> 0 `i `uc ]
[e $UE 7  ]
"109
}
[e :U 9 ]
"110
}
[e :U 8 ]
[; ;gcr.c: 109: }
[; ;gcr.c: 110: }
[; ;gcr.c: 111: return 1;
"111
[e ) -> -> 1 `i `uc ]
[e $UE 7  ]
[; ;gcr.c: 112: }
"112
[e :UE 7 ]
}
"115
[v _gcr_get_decoded `(uc ~T0 @X0 1 ef1`*uc ]
{
[; ;gcr.c: 115: unsigned char gcr_get_decoded(unsigned char *raw_data) {
[e :U _gcr_get_decoded ]
[v _raw_data `*uc ~T0 @X0 1 r1 ]
[f ]
[; ;gcr.c: 116: if (gcr_bits >= 10) {
"116
[e $ ! >= -> _gcr_bits `i -> 10 `i 11  ]
{
"117
[v _val `us ~T0 @X0 1 a ]
[; ;gcr.c: 117: unsigned short val = gcr_val & 0x3ff;
[e = _val -> & -> _gcr_val `ui -> -> 1023 `i `ui `us ]
[; ;gcr.c: 118: *raw_data = (unsigned char) ((GCR_decode[val >> 5] << 4) |
[; ;gcr.c: 119: (GCR_decode[val & 0x1f]));
"119
[e = *U _raw_data -> | << -> *U + &U _GCR_decode * -> >> -> _val `ui -> 5 `i `ux -> -> # *U &U _GCR_decode `ui `ux `i -> 4 `i -> *U + &U _GCR_decode * -> & -> _val `ui -> -> 31 `i `ui `ux -> -> # *U &U _GCR_decode `ui `ux `i `uc ]
[; ;gcr.c: 120: gcr_val = gcr_val >> 10;
"120
[e = _gcr_val -> >> -> _gcr_val `ui -> 10 `i `us ]
[; ;gcr.c: 121: gcr_bits = gcr_bits - 10;
"121
[e = _gcr_bits -> - -> _gcr_bits `i -> 10 `i `uc ]
[; ;gcr.c: 122: return 1;
"122
[e ) -> -> 1 `i `uc ]
[e $UE 10  ]
"123
}
[e :U 11 ]
[; ;gcr.c: 123: }
[; ;gcr.c: 124: return 0;
"124
[e ) -> -> 0 `i `uc ]
[e $UE 10  ]
[; ;gcr.c: 125: }
"125
[e :UE 10 ]
}
